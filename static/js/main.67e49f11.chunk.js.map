{"version":3,"sources":["components/GooglePlaceSearch.js","App.js","serviceWorker.js","index.js"],"names":["GooglePlaceSearch","setPlaceInfo","useState","inputValue","setInputValue","useEffect","Geocode","setApiKey","process","fromAddress","address","a","response","results","length","geometry","location","lat","lng","String","lon","console","error","className","onSubmit","e","preventDefault","undefined","placeholder","type","autoFocus","value","onChange","target","App","placeInfo","forecast","apikey","lang","Boolean","window","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"gUAqDeA,G,MAjDW,SAAC,GAAsB,IAApBC,EAAmB,EAAnBA,aAAmB,EACVC,mBAAS,IADC,mBACvCC,EADuC,KAC3BC,EAD2B,KAG9CC,qBAAU,WACRC,IAAQC,UAAUC,6CACjB,IAEH,IAAMC,EAAW,uCAAG,WAAOC,GAAP,qBAAAC,EAAA,+EAEOL,IAAQG,YAAYC,GAF3B,QAEVE,EAFU,QAGHC,QAAQC,SAAS,EACPF,EAASC,QAAQ,GAAGE,SAASC,SAA1CC,EADmB,EACnBA,IAAKC,EADc,EACdA,IACbjB,EAAa,CAAEgB,IAAKE,OAAOF,GAAMG,IAAKD,OAAOD,MAL/B,gDAQhBG,QAAQC,MAAR,MARgB,yDAAH,sDAyBjB,OACE,yBAAKC,UAAU,wBACb,gJACA,0BAAMA,UAAU,cAAcC,SAhBjB,SAACC,GAChBA,EAAEC,sBACmBC,IAAjB1B,GACFA,OAAa0B,GAEflB,EAAYN,GACZC,EAAc,MAWV,2BACEwB,YAAY,2DACZC,KAAK,OACLC,WAAS,EACTC,MAAO5B,EACP6B,SAbc,SAACP,GACrBrB,EAAcqB,EAAEQ,OAAOF,UAcnB,oDCtBOG,MAnBf,WAAgB,IAAD,EACqBhC,wBAASyB,GAD9B,mBACNQ,EADM,KACKlC,EADL,KAEb,OACE,oCACE,kBAAC,EAAD,CAAmBA,aAAcA,IAChCkC,GACC,kBAAC,IAAD,CACEC,SAAS,QACTC,OAAQ7B,mCACR8B,KAAK,KACLT,KAAK,MACLZ,IAAKkB,EAAUlB,IACfG,IAAKe,EAAUf,QCNLmB,QACW,cAA7BC,OAAOxB,SAASyB,UAEe,UAA7BD,OAAOxB,SAASyB,UAEhBD,OAAOxB,SAASyB,SAASC,MACvB,2DCbNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SD0HpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAhC,GACLD,QAAQC,MAAMA,EAAMiC,c","file":"static/js/main.67e49f11.chunk.js","sourcesContent":["import React, { useEffect, useState } from 'react';\r\nimport Geocode from 'react-geocode';\r\nimport './GooglePlaceSearch.css';\r\n\r\nconst GooglePlaceSearch = ({ setPlaceInfo }) => {\r\n  const [inputValue, setInputValue] = useState('');\r\n\r\n  useEffect(() => {\r\n    Geocode.setApiKey(process.env.REACT_APP_GOOGLE_MAP_KEY);\r\n  }, []);\r\n\r\n  const fromAddress = async (address) => {\r\n    try {\r\n      const response = await Geocode.fromAddress(address);\r\n      if (response.results.length) {\r\n        const { lat, lng } = response.results[0].geometry.location;\r\n        setPlaceInfo({ lat: String(lat), lon: String(lng) });\r\n      }\r\n    } catch (error) {\r\n      console.error(error);\r\n    }\r\n  };\r\n\r\n  const onSubmit = (e) => {\r\n    e.preventDefault();\r\n    if (setPlaceInfo !== undefined) {\r\n      setPlaceInfo(undefined);\r\n    }\r\n    fromAddress(inputValue);\r\n    setInputValue('');\r\n  };\r\n\r\n  const onChangeInput = (e) => {\r\n    setInputValue(e.target.value);\r\n  };\r\n\r\n  return (\r\n    <div className=\"background container\">\r\n      <p>원하는 도시를 검색해 날씨를 확인해보세요!</p>\r\n      <form className=\"search-form\" onSubmit={onSubmit}>\r\n        <input\r\n          placeholder=\"장소를 입력해 주세요\"\r\n          type=\"text\"\r\n          autoFocus\r\n          value={inputValue}\r\n          onChange={onChangeInput}\r\n        />\r\n        <button>검색</button>\r\n      </form>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default GooglePlaceSearch;\r\n","import React, { useState } from 'react';\nimport OpenWeather from 'react-open-weather-widget';\nimport 'react-open-weather-widget/lib/css/ReactWeather.css';\nimport './App.css';\nimport GooglePlaceSearch from './components/GooglePlaceSearch';\n\nfunction App() {\n  const [placeInfo, setPlaceInfo] = useState(undefined);\n  return (\n    <>\n      <GooglePlaceSearch setPlaceInfo={setPlaceInfo} />\n      {placeInfo && (\n        <OpenWeather\n          forecast=\"5days\"\n          apikey={process.env.REACT_APP_OPEN_WEATHER_KEY}\n          lang=\"ko\"\n          type=\"geo\"\n          lat={placeInfo.lat}\n          lon={placeInfo.lon}\n        />\n      )}\n    </>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}